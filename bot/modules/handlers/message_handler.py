import aiogram.utils.markdown as md

from aiogram import types, Dispatcher
from bot.modules.keyboard import create_inline_keyboard, create_reply_keyboard
from aiogram.dispatcher import FSMContext
from bot.modules.states import Forms
from bot.db.models.application import Application
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode
from .callback_data_vars import *


def inline_start_keyboard():
    return create_inline_keyboard(['–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', '–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É'],
                                  [CREATE_APPLICATION, DELETE_APPLICATION])


async def start_command(message: types.Message):
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç üëá', reply_markup=inline_start_keyboard())


# region CREATE_APPLICATION
async def share_phone_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['section_name'] = message.text
    await message.reply('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
                        reply_markup=create_reply_keyboard(
                            ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä'], request_contact=True
                        ))
    await Forms.next()


async def share_location(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.contact.phone_number.replace('+', '')
    await message.reply('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
                        reply_markup=create_reply_keyboard(
                            ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'], request_location=True
                        ))
    await Forms.next()


async def confirm_data(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['location'] = message.location
        data['application_model'] = Application(
            data['section'], data['section_name'], data['phone_number'], data['location']
        )
        app_model = data['application_model']
        print(app_model)
        await message.answer(
            md.text(
                md.text(md.bold('–†–∞–∑–¥–µ–ª:'), app_model.getSection()),
                md.text(md.bold('–ù–∞–∑–≤–∞–Ω–∏–µ:'), app_model.getSectionName()),
                md.text(md.bold('–ù–æ–º–µ—Ä:'), app_model.getPhoneNumber()),
                md.text(md.bold('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:'), f'–®–∏—Ä–æ—Ç–∞: {message.location.latitude} '
                                                    f'–î–æ–ª–≥–æ—Ç–∞: {message.location.longitude}'),
                sep='\n'
            ),
            reply_markup=create_inline_keyboard(
                ['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'], [INSERT_DATA, MAIN_MENU]
            ),
            parse_mode=ParseMode.MARKDOWN)
    await Forms.next()


async def check_contact(message: types.Message):
    await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.')


async def check_location(message: types.Message):
    await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.')
# endregion


async def cancel_handler(message: types.Message, state: FSMContext):
    """Exit from finite-state machine"""
    current_state = await state.get_state()
    if current_state is None:
        return
    await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.')
    await state.finish()


async def send_other_text(message: types.Message):
    await message.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start.')


def init_message_handler(disp: Dispatcher):
    disp.register_message_handler(start_command, commands=['start', 'help'])
    disp.register_message_handler(cancel_handler, state='*', commands=['cancel', '–æ—Ç–º–µ–Ω–∞'])
    disp.register_message_handler(cancel_handler, Text(equals=['cancel', '–æ—Ç–º–µ–Ω–∞'], ignore_case=True), state='*')
    disp.register_message_handler(check_contact, lambda message: not message.contact, state=Forms.phone_number)
    disp.register_message_handler(check_location, lambda message: not message.location, state=Forms.location)
    disp.register_message_handler(share_phone_number, state=Forms.section_name)
    disp.register_message_handler(share_location, content_types=['contact'], state=Forms.phone_number)
    disp.register_message_handler(confirm_data, content_types=['location'], state=Forms.location)
    disp.register_message_handler(send_other_text)
